/*
	Time Complexity: O(N^3)
	Space complexity: O(1)

	Where 'N' is the number of element present in the given array.
*/

#include <algorithm>

string fourSum(vector < int > arr, int target, int n) {
    
    // First sort the array.
    sort(arr.begin(), arr.end());

    /* 
        Fix first two elements and find other 
        two elements using two pointer technique.
    */
    for (int i = 0; i < n - 3; ++i) {
        for (int j = i + 1; j < n - 2; ++j) {
            // First index of remaining elements.
            int left = j + 1;
            // Last index of remaining elements.
            int right = n - 1;

            while (left < right) {
                int sum = arr[i] + arr[j] + arr[left] + arr[right];
                // If we found the target sum then we return Yes.
                if (sum == target) {
                    return "Yes";
                } else if (sum < target) {
                    /*
                        As we already sort the array this implies arr[left] < = arr[right]
                        And arr[right] is already having a greater value 
                        so we can not increase arr[right] further. In this case, we move 
                        forward through the left pointerb because 
                        arr[left+1] >= arr[left] to match up with the required sum.
                    */
                    ++left;
                } else {
                    /*
                        If the sum is greater than target that means we need to 
                        decrease our current sum so in this case, we move 
                        backward through the right pointer because 
                        arr[right-1] <= arr[right] to match up with the required sum.
                    */

                    --right;
                }
            }
        }
    }
    // If we can not found the target sum then we return No.
    return "No";
}